---
title: "Regression"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## Load packages
```{r}
library(tidyverse)
library(segmented)
library(readxl)
library(ggpubr)
library(ggrepel)
```

## Load data
```{r}
# Rt data
ontario <- read_csv('Estimated_R/ontario_R.csv')
peel <- read_csv('Estimated_R/peel_R.csv')
toronto <- read_csv('Estimated_R/tor_R.csv')
waterloo <- read_csv('Estimated_R/wat_R.csv')
york <- read_csv('Estimated_R/york_R.csv')

# Timeline data
o_tl <- read_excel('Mobility&Rt January 30.xlsx', 
                   sheet = 'Ontario Timeline')
p_tl <- read_excel('Mobility&Rt January 30.xlsx', 
                   sheet = 'Peel Timeline')
t_tl <- read_excel('Mobility&Rt January 30.xlsx', 
                   sheet = 'Toronto Timeline')
w_tl <- read_excel('Mobility&Rt January 30.xlsx', 
                   sheet = 'Waterloo Timeline')
y_tl <- read_excel('Mobility&Rt January 30.xlsx', 
                   sheet = 'York Timeline')
```

## Functions
```{r}
# create segmented regressions
# input Rt data, plot name, and breakpoints (if available)
# output segments, plot, and breakpoints

segmented_regressions <- function(data, name, breaks=NULL) {
  
  # filter data to all start on same date
  data <- data %>% 
    filter(date_start>='2020-03-12')
  # make linear regression for entire data
  my.lm <- lm(`Mean(R)` ~ date_start, data = data)
  # make segmented regression
  if (is.null(breaks)) {
    my.seg <- segmented(my.lm,
                        seg.Z = ~ date_start)
    breaks <- my.seg$psi[, 2]
  } else {
    my.seg <- segmented(my.lm,
                        seg.Z = ~ date_start,
                        fixed.psi = list(date_start=breaks$Date))
  }
  
  # get the fitted data
  my.fitted <- fitted(my.seg)
  my.model <- data.frame(date_start = data$date_start, 
                         Mean_R = my.fitted)
  # plot the fitted model
  p <- ggplot(data, aes(x = date_start, y = `Mean(R)`)) +
    geom_line() +
    geom_line(my.model, 
              mapping=aes(x = date_start, y = Mean_R),
              color='blue') +
    labs(title=name) +
    xlab('Date')
  
  return(list(my.seg=my.seg, plot=p, breaks=breaks))
}
```

```{r}
# annotate_plot <- function(plot, breaks, timeline) {
#   
#   if (is.numeric(breaks)) {
#     p <- plot + 
#       geom_vline(xintercept = breaks,
#                  linetype = "dashed")
#   } else {
#     p <- plot +
#       geom_rect(timeline,
#                 mapping = aes(xmin=break_start, xmax=break_end,
#                               ymin=-Inf, ymax=+Inf,
#                               color=restrictions)) +
#       geom_vline(breaks, 
#                  mapping = aes(xintercept=Date), 
#                  linetype = "dashed") +
#       geom_label_repel(breaks,
#                        mapping=aes(label=Milestone,x=Date,y=3.5),
#                        size=2)
#   }
#   
#   return(p)
# }
```

```{r}
regression_eqs <- function(data, my.seg, breaks) {
  # get slopes of segments
  slopes <- slope(my.seg)
  # get intercepts of segments
  intercepts <- intercept(my.seg)
  # get first date in data
  first <- first(data$date_start)
  # get last date
  last <- last(data$date_start)
  # get mystery break point and find difference between first date
  x <- my.seg$psi[, 2] - as.numeric(first, 'yyyy-mm-dd')
  # add to first date to get mystery date object
  calc <- first + round(x)
  # create new dates vector
  new_dates <- c(first, last, calc)
  # append to known dates and sort
  if(!is.numeric(breaks)){
    segs <- sort(append(breaks$Date, new_dates))
  } else {
    segs <- sort(new_dates)
  }
  
  # create data frame of all the info
  df <- data.frame(break_start=segs[1:length(segs)-1],
                   break_end=segs[-1],
                   slope=slopes$date_start[,1],
                   intercept=intercepts$date_start[,1])
  return(df)
}
```

## Ontario
Data starts on 3/4/20
Date	Milestone  
3/17/20	Emergency declared
<!-- 3/23/20	Closure of all non essential business   -->
<!-- 4/14/20	Extended state of Emergency for further 4 weeks   -->
<!-- 5/6/20	Emergency extended again upto 19/05/20  -->
5/14/20	Phase2 :Restart. Guidelines issued  
<!-- 5/27/20	Extended Emergency order till June 9,2020   -->
<!-- 6/2/20	Extended Emergency order for 28 days   -->
<!-- 6/8/20	Stage 2of recovery Plan in some regions announced   -->
<!-- 7/9/20	Extended Emergency order till July 22,2020   -->
<!-- 7/13/20	Stage 3 of recovery Plan in some regions announced from 17/07/20   -->
<!-- 8/20/20	Extended Emergency order till Sept 22,2020   -->
9/28/20	Enters Stage 2/ Second Wave of Pandemic official announcement  
<!-- 12/14/20	Orange   -->
12/26/20	Grey  

```{r}
# get list of break points
dates <-  as.Date(c('2020-03-17', '2020-05-14', '2020-09-28', '2020-12-26'))

breaks <- o_tl %>% 
  mutate(Date = as.Date(Date)) %>% 
  filter(Date %in% dates) %>% 
  mutate(Milestone = paste(Date, Milestone, sep='\n'))

res <- segmented_regressions(ontario, 'Ontario', breaks)
df <- regression_eqs(ontario, res$my.seg, res$breaks)

ont_fix_plot <- res$plot + 
  annotate('rect', xmin=df$break_start[2], xmax=df$break_end[2],
           ymin=-Inf, ymax=+Inf,
           fill='red', alpha=0.3) +
  annotate('rect', xmin=df$break_start[3], xmax=df$break_end[3],
           ymin=-Inf, ymax=+Inf,
           fill='green', alpha=0.2) +
  annotate('rect', xmin=df$break_start[6], xmax=df$break_end[6],
           ymin=-Inf, ymax=+Inf,
           fill='red', alpha=0.3) +
  geom_vline(breaks,
             mapping = aes(xintercept=Date),
             linetype = "dashed") +
  geom_label_repel(breaks,
                   mapping=aes(label=c("Lockdown", "Decreasing restrictions", "Second Wave Announcement", "Lockdown"),
                               x=Date,y=3.5),
                   size=2.5)
  
ggsave('Breakpoint_Analysis/Fixed/Ontario/Ontario_Fixed_Breaks.png',
       ont_fix_plot,
       height = 8.5,
       width = 11,
       units = 'in')
write_csv(df, 'Breakpoint_Analysis/Fixed/Ontario/Ontario_Fixed_Breaks.csv')
ont_fix_plot
df
```

```{r}
res <- segmented_regressions(ontario, 'Ontario')
df <- regression_eqs(ontario, res$my.seg, res$breaks)
ggsave('Breakpoint_Analysis/Default/Ontario/Ontario_Default_Breaks.png', 
       res$plot,
       height = 8.5,
       width = 11,
       units = 'in')
write_csv(df, 'Breakpoint_Analysis/Default/Ontario/Ontario_Default_Breaks.csv')
ont_def_plot <- res$plot +
  geom_vline(xintercept = res$breaks,
             linetype = "dashed")
ont_def_plot
df
```

## Peel
Data starts on 3/12/20
Date	Milestone  
<!-- 3/5/20	First Confirmed Case   -->
3/17/20 Emergency declared
<!-- 3/26/20	State of Emergency declared   -->
6/22/20	Enters to Stage 2  
<!-- 7/29/20	Enters to Stage 3   -->
<!-- 9/28/20 Second Wave Announcement -->
10/11/20	“modified” version of Stage 2
<!-- 11/7/20	Orange   -->
11/9/20	Red
12/14/20	Grey  
```{r}
dates <- as.Date(c('2020-03-17', '2020-06-22', '2020-10-11', '2020-11-09', '2020-12-14'))

breaks <- p_tl %>% 
  mutate(Date = as.Date(Date)) %>% 
  filter(Date %in% dates) %>% 
  mutate(Milestone = paste(Date, Milestone, sep='\n'))

res <- segmented_regressions(peel, 'Peel', breaks)
df <- regression_eqs(peel, res$my.seg, res$breaks)

peel_fix_plot <- res$plot +
  annotate('rect', xmin=df$break_start[2], xmax=df$break_end[2],
           ymin=-Inf, ymax=+Inf,
           fill='red', alpha=0.3) +
  annotate('rect', xmin=df$break_start[3], xmax=df$break_end[4],
           ymin=-Inf, ymax=+Inf,
           fill='green', alpha=0.2) +
  annotate('rect', xmin=df$break_start[6], xmax=df$break_end[6],
           ymin=-Inf, ymax=+Inf,
           fill='red', alpha=0.1) +
  annotate('rect', xmin=df$break_start[7], xmax=df$break_end[7],
           ymin=-Inf, ymax=+Inf,
           fill='red', alpha=0.3) +
  geom_vline(breaks,
             mapping = aes(xintercept=Date),
             linetype = "dashed") +
  geom_label_repel(breaks,
                   mapping=aes(label=c('Lockdown', 'Decreasing Restrictions', 'Modified Stage 2', 'Red - Control', 'Lockdown'),x=Date,y=3.5),
                   size=2.5)

ggsave('Breakpoint_Analysis/Fixed/Peel/Peel_Fixed_Breaks.png', 
       peel_fix_plot,
       height = 8.5,
       width = 11,
       units = 'in')
write_csv(df, 'Breakpoint_Analysis/Fixed/Peel/Peel_Fixed_Breaks.csv')

peel_fix_plot
df
```

```{r}
res <- segmented_regressions(peel, 'Peel')
df <- regression_eqs(peel, res$my.seg, res$breaks)
ggsave('Breakpoint_Analysis/Default/Peel/Peel_Default_Breaks.png', 
       res$plot,
       height = 8.5,
       width = 11,
       units = 'in')
write_csv(df, 'Breakpoint_Analysis/Default/Peel/Peel_Default_Breaks.csv')
peel_def_plot <- res$plot +
  geom_vline(xintercept = res$breaks,
             linetype = "dashed")
  
peel_def_plot
df
```

## Toronto
Data starts on 3/4/20
Date	Milestone  
3/17/20	State of Emergency declared
<!-- 3/23/20	City hall and civic centres closed   -->
6/24/20	enters Stage 2  
<!-- 11/14/20	Orange -->
11/20/20	Red
12/14/20	Grey  
```{r}
dates <- as.Date(c('2020-03-17', '2020-06-24', '2020-09-28', '2020-11-20','2020-12-14'))

breaks <- t_tl %>% 
  mutate(Date = as.Date(Date)) %>% 
  filter(Date %in% dates) %>% 
  mutate(Milestone = paste(Date, Milestone, sep='\n'))

res <- segmented_regressions(toronto, 'Toronto', breaks)
df <- regression_eqs(toronto, res$my.seg, res$breaks)

tor_fix_plot <- res$plot +
  annotate('rect', xmin=df$break_start[2], xmax=df$break_end[3],
           ymin=-Inf, ymax=+Inf,
           fill='red', alpha=0.3) +
  annotate('rect', xmin=df$break_start[4], xmax=df$break_end[4],
           ymin=-Inf, ymax=+Inf,
           fill='green', alpha=0.2) +
  annotate('rect', xmin=df$break_start[6], xmax=df$break_end[6],
           ymin=-Inf, ymax=+Inf,
           fill='red', alpha=0.1) +
  annotate('rect', xmin=df$break_start[7], xmax=df$break_end[7],
         ymin=-Inf, ymax=+Inf,
         fill='red', alpha=0.3) +
  geom_vline(breaks,
             mapping = aes(xintercept=Date),
             linetype = "dashed") +
  geom_label_repel(breaks,
                   mapping=aes(label=c("Lockdown", "Decreasing restrictions", "Second Wave Announcement", "Red - Control", "Lockdown"),x=Date,y=3.5),
                   size=2.5)

ggsave('Breakpoint_Analysis/Fixed/Toronto/Toronto_Fixed_Breaks.png', 
       tor_fix_plot,
       height = 8.5,
       width = 11,
       units = 'in')
write_csv(df, 'Breakpoint_Analysis/Fixed/Toronto/Toronto_Fixed_Breaks.csv')

tor_fix_plot
df
```

```{r}
res <- segmented_regressions(toronto, 'Toronto')
df <- regression_eqs(toronto, res$my.seg, res$breaks)
ggsave('Breakpoint_Analysis/Default/Toronto/Toronto_Default_Breaks.png', 
       res$plot,
       height = 8.5,
       width = 11,
       units = 'in')
write_csv(df, 'Breakpoint_Analysis/Default/Toronto/Toronto_Default_Breaks.csv')
tor_def_plot <- res$plot +
  geom_vline(xintercept = res$breaks,
             linetype = "dashed")
tor_def_plot
df
```

## Waterloo
Data starts 3/11/20
Date	Milestone  
<!-- 3/3/20	Region's first Case   -->
3/17/20	State of Emergency declared
<!-- 3/25/20	Region's municipalities declare their own State of Emergency   -->
6/12/20	Move into Stage 2  
<!-- 7/13/20	Move into Stage 3   -->
9/22/20	Moved to second wave  
<!-- 11/3/20	Green   -->
<!-- 11/7/20	Yellow   -->
<!-- 11/16/20	Orange   -->
11/23/20	Red
12/26/20	Grey
```{r}
dates <- as.Date(c('2020-03-17', '2020-06-12', '2020-09-22', '2020-11-23', '2020-12-26'))

breaks <- w_tl %>% 
  mutate(Date = as.Date(Date)) %>% 
  filter(Date %in% dates) %>% 
  mutate(Milestone = paste(Date, Milestone, sep='\n'))

res <- segmented_regressions(waterloo, 'Waterloo', breaks)
df <- regression_eqs(waterloo, res$my.seg, res$breaks)

wat_fix_plot <- res$plot +
  annotate('rect', xmin=df$break_start[2], xmax=df$break_end[2],
           ymin=-Inf, ymax=+Inf,
           fill='red', alpha=0.3) +
  annotate('rect', xmin=df$break_start[3], xmax=df$break_end[4],
           ymin=-Inf, ymax=+Inf,
           fill='green', alpha=0.2) +
  annotate('rect', xmin=df$break_start[6], xmax=df$break_end[6],
           ymin=-Inf, ymax=+Inf,
           fill='red', alpha=0.1) +
  annotate('rect', xmin=df$break_start[7], xmax=df$break_end[7],
         ymin=-Inf, ymax=+Inf,
         fill='red', alpha=0.3) +
  geom_vline(breaks,
             mapping = aes(xintercept=Date),
             linetype = "dashed") +
  geom_label_repel(breaks,
                   mapping=aes(label=c("Lockdown", "Decreasing restrictions", "Moved to second wave", "Red - Control", "Lockdown"),x=Date,y=3.5),
                   size=2.5)
  

ggsave('Breakpoint_Analysis/Fixed/Waterloo/Waterloo_Fixed_Breaks.png', 
       wat_fix_plot,
       height = 8.5,
       width = 11,
       units = 'in')
write_csv(df, 'Breakpoint_Analysis/Fixed/Waterloo/Waterloo_Fixed_Breaks.csv')

wat_fix_plot
df
```

```{r}
res <- segmented_regressions(waterloo, 'Waterloo')
df <- regression_eqs(waterloo, res$my.seg, res$breaks)
ggsave('Breakpoint_Analysis/Default/Waterloo/Waterloo_Default_Breaks.png', 
       res$plot,
       height = 8.5,
       width = 11,
       units = 'in')
write_csv(df, 'Breakpoint_Analysis/Default/Waterloo/Waterloo_Default_Breaks.csv')
wat_def_plot <- res$plot +
  geom_vline(xintercept = res$breaks,
             linetype = "dashed")
wat_def_plot
df
```


## York
Data starts on 3/10/20
Date	Milestone  
3/17/20	State of Emergency Declared  
5/19/20	Phase2 Stage1 reopening  
<!-- 6/19/20	Phase2 Stage2 reopening   -->
<!-- 7/24/20	Stage 3 Reopening   -->
10/19/20	Modified Stage 2  
<!-- 11/6/20	Orange Level   -->
11/16/20	Red Level
12/14/20	Grey Level  
```{r}
dates <- as.Date(c('2020-03-17', '2020-05-19', '2020-10-19', '2020-11-16','2020-12-14'))

breaks <- y_tl %>% 
  mutate(Date = as.Date(Date)) %>% 
  filter(Date %in% dates) %>% 
  mutate(Milestone = paste(Date, Milestone, sep='\n'))

res <- segmented_regressions(york, 'York', breaks)
df <- regression_eqs(york, res$my.seg, res$breaks)

york_fix_plot <- res$plot +
  annotate('rect', xmin=df$break_start[2], xmax=df$break_end[2],
           ymin=-Inf, ymax=+Inf,
           fill='red', alpha=0.3) +
  annotate('rect', xmin=df$break_start[3], xmax=df$break_end[4],
           ymin=-Inf, ymax=+Inf,
           fill='green', alpha=0.2) +
  annotate('rect', xmin=df$break_start[6], xmax=df$break_end[6],
         ymin=-Inf, ymax=+Inf,
         fill='red', alpha=0.1) +
  annotate('rect', xmin=df$break_start[7], xmax=df$break_end[7],
         ymin=-Inf, ymax=+Inf,
         fill='red', alpha=0.3) +
  geom_vline(breaks,
             mapping = aes(xintercept=Date),
             linetype = "dashed") +
  geom_label_repel(breaks,
                   mapping=aes(label=c("Lockdown", "Decreasing restrictions", "Modified Stage 2", "Red - Control", "Lockdown"),x=Date,y=3.5),
                   size=2.5)

ggsave('Breakpoint_Analysis/Fixed/York/York_Fixed_Breaks.png', 
       york_fix_plot,
       height = 8.5,
       width = 11,
       units = 'in')
write_csv(df, 'Breakpoint_Analysis/Fixed/York/York_Fixed_Breaks.csv')

york_fix_plot
df
```

```{r}
res <- segmented_regressions(york, 'York')
df <- regression_eqs(york, res$my.seg, res$breaks)
ggsave('Breakpoint_Analysis/Default/York/York_Default_Breaks.png',
       res$plot,
       height = 8.5,
       width = 11,
       units = 'in')
write_csv(df, 'Breakpoint_Analysis/Default/York/York_Default_Breaks.csv')
york_def_plot <- res$plot +
  geom_vline(xintercept = res$breaks,
             linetype = "dashed")
york_def_plot
df
```

Create combined figure
```{r}
fixed <- ggarrange(ont_fix_plot, peel_fix_plot, tor_fix_plot, wat_fix_plot, york_fix_plot,
          ncol=1)
default <- ggarrange(ont_def_plot, peel_def_plot, tor_def_plot, wat_def_plot, york_def_plot,
          ncol=1)
ggsave('Breakpoint_Analysis/Fixed/Fixed.png', 
       fixed,
       height = 11,
       width = 8.5,
       units = 'in')
ggsave('Breakpoint_Analysis/Default/Default.png', 
       default,
       height = 11,
       width = 8.5,
       units = 'in')
```

